from aiogram import Router
from aiogram.types import Message
from utils.api_clients.binance import format_p2p_result
from utils.api_clients.kucoin import get_spot_price_kucoin
from utils.api_clients.mexc import get_spot_price_mexc

router = Router()

@router.message(lambda m: m.text == "üìä –ê—Ä–±—ñ—Ç—Ä–∞–∂")
async def show_binance_arbitrage(message: Message):
    result = await format_p2p_result(asset="USDT", fiat="UAH")
    await message.answer(result)

@router.message(lambda m: m.text == "üí± KuCoin —Ü—ñ–Ω–∞")
async def show_kucoin_price(message: Message):
    price = await get_spot_price_kucoin("BTC-USDT")
    if price:
        await message.answer(f"üí± –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ BTC –Ω–∞ KuCoin: <b>{price:.2f} USDT</b>")
    else:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –∑ KuCoin.")

@router.message(lambda m: m.text == "üí± MEXC —Ü—ñ–Ω–∞")
async def show_mexc_price(message: Message):
    price = await get_spot_price_mexc("BTCUSDT")
    if price:
        await message.answer(f"üí± –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ BTC –Ω–∞ MEXC: <b>{price:.2f} USDT</b>")
    else:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –∑ MEXC.")